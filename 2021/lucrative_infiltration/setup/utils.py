from Crypto.Util.number import *
from hashlib import sha256
from Crypto.Random.random import randrange

q = 89666094075799358333912553751544914665545515386283824011992558231120286657213785559151513056027280869020616111209289142073255564770995469726364925295894316484503027288982119436576308594740674437582226015660087863550818792499346330713413631956572604302171842281106323020998625124370502577704273068156073608681
assert(isPrime(q))
p = 2*q + 1
assert(isPrime(p))
g = 5
H = sha256
threshold = 166

def fast_rng():
	return randrange(2**(3 * threshold // 2))

def generate_private_key():
	return fast_rng()

def sign_transaction(source_addr, dest_addr, money, privkey):
	m = (source_addr + " -> " + dest_addr + ": " + str(money)).encode()
	k = fast_rng()
	while GCD(k,p-1) != 1:
		k = fast_rng()
	r = pow(g,k,p)
	h = int(H(m).hexdigest(),16)
	s = ((h - privkey * r)* inverse(k,p-1)) % (p - 1)
	assert(s != 0)
	return (m,r,s)

def verify(source_addr, dest_addr, money, r, s, pubkey):
	m = (source_addr + " -> " + dest_addr + ": " + str(money)).encode()
	if r <= 0 or r >= p:
		return False
	if s <= 0 or s >= (p-1):
		return False
	h = int(H(m).hexdigest(),16)
	return pow(g,h,p) == (pow(pubkey,r,p) * pow(r,s,p)) % p

def register_transaction(source_addr, dest_addr, amount):
	try:
		assert(source_addr in known_users)
		assert(dest_addr in known_users)
		if amount > known_users[source_addr]['money']:
			print("You don't have enough money...")
			return 0	
		r = int(input("r : "))
		s = int(input("s : "))
	except:
		print("Something went wrong. Aborting.")
		return 0

	if verify(source_addr, dest_addr, amount, r, s, known_users[source_addr]['pubkey']):
		print("Signature is valid. Transaction will proceed shortly.")
		known_users[source_addr]['money'] -= amount
		known_users[dest_addr]['money'] += amount
		return 1
	else:
		print("Incorrect signature. Transaction aborted.")
		return 0

known_users = {	
	'f5990eeefca620422958b78af88059399a41c72cf186bdc09f837b6c7fbf8645' : {'username': 'Wendel', 'money': 13, 'pubkey': 115426520462996952141524638155117063083750973326828920546325024700894852234715782192951616015686408971370269102939096339336116730629172396752521755357197647152183408471914664196333790037269215134587337473135156071937184015349546990450555132282353317467774401072890890278000672590360596979289559721886769210870},
	'cecbd3a04d51d4e938d6d65b1c6790db6cfc84b5f0855d0362b486f0026da0d0' : {'username': 'Vlastimir', 'money': 1900, 'pubkey': 23243147869152890576587864279917699661622534664437386962212915835049743328305283533443430383807650226381498864233334486057348951395818670911032705572312568245081730686548432066440912655142567863264538424895903875875869689890357447228592309570389172409703374204013369464788904143720809844161144268682998512767},
	'98e76e614cf3d3536ff9a7b8fff41302576342703863cf0e15a4ae039af34d9d' : {'username': 'Freyr', 'money' : 0, 'pubkey': 78257584852542057341916637740107820536021607591658653310718787003377177513367064020531969566642967115699816707762882827930439167481243550281128907475836007216172992480942318630501874720176945376925688178115974200245806615458379957841708680114495544249327623294799115063056929355769192385595956674154033073346},
	'006706ff90d78db7250d3f248650f94aae5c28928e9d1cef93f1b70807e6f191' : {'username': 'Central Fund', 'money' : 1000000, 'pubkey': 100038547567711988728890024064426264492890569324287435236386100416158982392518079625868906035901624442127724765841040390718425304153644064456937018402292156203757432085080993882642964538812172396947837117926054583698191352681717943874009884345710909584320955903934016863292128694376654914716039790602667442915}
}
